{"version":3,"sources":["../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-transition-group/esm/CSSTransition.js","../node_modules/dom-helpers/esm/addClass.js","../node_modules/dom-helpers/esm/hasClass.js","Detail.js"],"names":["replaceClassName","origClass","classToRemove","replace","RegExp","removeClass","node","classes","split","forEach","c","className","element","classList","remove","setAttribute","baseVal","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","appliedClasses","appear","enter","exit","onEnter","maybeNode","maybeAppearing","_this$resolveArgument","resolveArguments","appearing","removeClasses","addClass","props","onEntering","_this$resolveArgument2","type","onEntered","_this$resolveArgument3","onExit","onExiting","onExited","nodeRef","current","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","_inheritsLoose","_proto","prototype","phase","scrollTop","add","contains","indexOf","hasClass","_addClass","_this$appliedClasses$","base","active","done","render","_this$props","_objectWithoutPropertiesLoose","React","createElement","Transition","_extends","Component","defaultProps","propTypes","Detail","useEffect","id","useParams","history","useHistory","찾은상품","shoes","find","상품","useState","inputData","inputData변경","누른탭","누른탭변경","스위치","스위치변경","dispatch","useSelector","state","useDispatch","Info","재고","TabContent","src","width","alt","x","title","content","price","value","onChange","e","target","onClick","payload","name","quan","push","goBack","Nav","variant","defaultActiveKey","Item","Link","eventKey","in","timeout"],"mappings":"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","file":"static/js/3.d468c555.chunk.js","sourcesContent":["function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { Nav, Navbar, Container, NavDropdown, Button } from \"react-bootstrap\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport \"./Detail.css\";\r\n\r\nfunction Detail(props) {\r\n  useEffect(() => {\r\n    //코드를 적습니다 여기\r\n  });\r\n  let { id } = useParams();\r\n  let history = useHistory();\r\n  let 찾은상품 = props.shoes.find(function (상품) {\r\n    return 상품.id == id;\r\n  });\r\n  let [inputData, inputData변경] = useState(\"\");\r\n  let [누른탭, 누른탭변경] = useState(0);\r\n  let [스위치, 스위치변경] = useState(false);\r\n\r\n  let state = useSelector((state) => state);\r\n  let dispatch = useDispatch();\r\n\r\n  let Info = (props) => {\r\n    return <p>재고 : {props.재고[id]}</p>;\r\n  };\r\n\r\n  let TabContent = (props) => {\r\n    useEffect(() => {\r\n      props.스위치변경(true);\r\n    });\r\n    if (props.누른탭 === 0) {\r\n      return <div>내용0</div>;\r\n    } else if (props.누른탭 === 1) {\r\n      return <div>내용1</div>;\r\n    } else if (props.누른탭 === 2) {\r\n      return <div>내용2</div>;\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <img\r\n            src={`https://codingapple1.github.io/shop/shoes${+id + 1}.jpg`}\r\n            width=\"100%\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mt-4\">\r\n          <h4 className=\"pt-5\">{props.shoes.find((x) => x.id == id).title}</h4>\r\n          <p>{props.shoes.find((x) => x.id == id).content}</p>\r\n          <p>{props.shoes.find((x) => x.id == id).price}원</p>\r\n          <Info 재고={props.재고}></Info>\r\n          {inputData}\r\n          <input\r\n            value=\"a\"\r\n            onChange={(e) => {\r\n              inputData변경(e.target.value);\r\n            }}\r\n          />\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            onClick={() => {\r\n              dispatch({\r\n                type: \"항목추가\",\r\n                payload: { id: 찾은상품.id, name: 찾은상품.title, quan: 1 },\r\n              });\r\n              history.push(\"/cart\");\r\n            }}\r\n          >\r\n            주문하기\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              history.goBack();\r\n            }}\r\n            className=\"btn btn-danger\"\r\n          >\r\n            뒤로가기\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            eventKey=\"link-0\"\r\n            onClick={() => {\r\n              스위치변경(false);\r\n              누른탭변경(0);\r\n            }}\r\n          >\r\n            Active\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            eventKey=\"link-1\"\r\n            onClick={() => {\r\n              스위치변경(false);\r\n              누른탭변경(1);\r\n            }}\r\n          >\r\n            Option 2\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n      <CSSTransition in={스위치} classNames=\"wow\" timeout={500}>\r\n        <TabContent 누른탭={누른탭} 스위치변경={스위치변경} />\r\n      </CSSTransition>\r\n    </div>\r\n  );\r\n}\r\n\r\n//옛날 redux 방식\r\n// redux store 데이터를 가져와서 props로 변환해주는 함수. state==store에 있던 모든 데이터\r\n// function state를props화(state) {\r\n//   return {\r\n//     // redux store에 있던 객체를 state이란 이름으로 쓰겠다. state이란 이름을 props안에 넣어라\r\n//     state: state.reducer,\r\n//     alert열렸니: state.reducer2, //리듀서2에 있는거 가져오는법\r\n//   };\r\n// }\r\n// 퉤 뱉는다\r\n//export default connect(state를props화)(Detail);\r\nexport default Detail;\r\n"],"sourceRoot":""}